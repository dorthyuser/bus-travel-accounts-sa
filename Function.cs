using System;using System.Collections.Generic;using System.Linq;using System.Net.Http;using System.Text;using System.Text.Json;using System.Text.Json.Serialization;using System.Threading.Tasks;using System.Xml;using Amazon;using Amazon.CloudWatch;using Amazon.CloudWatch.Model;using Amazon.Lambda.APIGatewayEvents;using Amazon.Lambda.Core;using Amazon.S3;using Amazon.S3.Model;using Microsoft.Extensions.Configuration;[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]namespace GetAccountByIdLambda{public class Function{private static readonly HttpClient httpClient=new HttpClient();private readonly IConfiguration _config;public Function(){var builder=new ConfigurationBuilder().AddJsonFile("appsettings.json",optional:false,reloadOnChange:true).AddEnvironmentVariables();_config=builder.Build();}public async Task<APIGatewayProxyResponse> FunctionHandler(APIGatewayProxyRequest request,ILambdaContext context){var method=request.HttpMethod??"GET";string path=request.Path??"/accounts/{id}";var basicDetails=new Dictionary<string,object?>{["CUSTOMER_CORRELATION_ID"]=GetHeader(request,"CUSTOMER_CORRELATION_ID")??"CUSTOMER_CORRELATION_ID_NOT_FOUND",["X_CORRELATION_ID"]=GetHeader(request,"X_CORRELATION_ID")??(request.RequestContext?.RequestId??Guid.NewGuid().ToString()),["client_id"]=GetHeader(request,"client_id"),["httpMethod"]=method,["relativePath"]=path};string correlationId=Convert.ToString(basicDetails["X_CORRELATION_ID"])??Guid.NewGuid().ToString(); try{JsonLog(context,"START - Request received",new{details=basicDetails},correlationId);string id=null;if(request.PathParameters!=null&&request.PathParameters.TryGetValue("id",out var pid)){id=pid?.Trim();}JsonLog(context,"Before Request - GetAccountDetails",new{AccountId=id},correlationId,"BEFORE_REQUEST","DEBUG");if(string.IsNullOrWhiteSpace(id)){return await ErrorBadRequestAsync(context,basicDetails,correlationId,request,"Path parameter 'id' is required.");}var (instanceUrl,sessionId)=await SalesforceLoginAsync(_config,context);string apiVersion=_config["salesforce.api.version"]??"57.0";string restBase=$"{instanceUrl}/services/data/v{apiVersion}";string soql=$"select id, Account_Status__c, Salutation, firstname, lastname, PersonEmail, PersonBirthdate, Phone, PersonMobilePhone, PersonMailingAddress, Hotlisted__c, Source__c from account where id = '{id.Replace("'","\\'")}'";var req=new HttpRequestMessage(HttpMethod.Get,$"{restBase}/query?q={Uri.EscapeDataString(soql)}");req.Headers.Add("Authorization",$"Bearer {sessionId}");var resp=await httpClient.SendAsync(req);string body=await resp.Content.ReadAsStringAsync();if(!resp.IsSuccessStatusCode){return await HandleSalesforceHttpErrorAsync(context,basicDetails,correlationId,request,resp.StatusCode,body);}using var doc=JsonDocument.Parse(body);var root=doc.RootElement;var recs=root.TryGetProperty("records",out var arr)?arr:new JsonElement();int count=arr.ValueKind==JsonValueKind.Array?arr.GetArrayLength():0;JsonLog(context,"After Request - GetAccountDetails",new{message=$"Salesforce Get Account Details Response - No of accounts returned: {count}"},correlationId,"AFTER_REQUEST","DEBUG");if(count==0){return new APIGatewayProxyResponse{StatusCode=204,Body="[]",Headers=new Dictionary<string,string>{{"Content-Type","application/json"},{"X_CORRELATION_ID",correlationId}}};}var rec=arr[0];string TrimStr(string prop){return rec.TryGetProperty(prop,out var v)&&v.ValueKind!=JsonValueKind.Null?(v.ToString().Trim()):null;}DateTime? birth=null;if(rec.TryGetProperty("PersonBirthdate",out var pb) && pb.ValueKind!=JsonValueKind.Null){ if(DateTime.TryParse(pb.ToString(),out var dt)){birth=dt;}}string mailingStreet=null,mailingPostalCode=null,mailingCity=null,mailingCountry=null;if(rec.TryGetProperty("PersonMailingAddress",out var addr)&&addr.ValueKind==JsonValueKind.Object){mailingStreet=addr.TryGetProperty("street",out var v1)&&v1.ValueKind!=JsonValueKind.Null?v1.ToString().Trim():null;mailingPostalCode=addr.TryGetProperty("postalCode",out var v2)&&v2.ValueKind!=JsonValueKind.Null?v2.ToString().Trim():null;mailingCity=addr.TryGetProperty("city",out var v3)&&v3.ValueKind!=JsonValueKind.Null?v3.ToString().Trim():null;mailingCountry=addr.TryGetProperty("country",out var v4)&&v4.ValueKind!=JsonValueKind.Null?v4.ToString().Trim():null;}bool? hotlisted=null;if(rec.TryGetProperty("Hotlisted__c",out var hl)&&hl.ValueKind!=JsonValueKind.Null){ if(bool.TryParse(hl.ToString(),out var b)) hotlisted=b;}var accountSource=TrimStr("Source__c")??"";var result=new Dictionary<string,object?>{["id"]=TrimStr("Id"),["salutation"]=TrimStr("Salutation"),["firstName"]=TrimStr("FirstName"),["lastName"]=TrimStr("LastName"),["personBirthdate"]=birth,["phone"]=TrimStr("Phone"),["mobilePhone"]=TrimStr("PersonMobilePhone"),["personEmail"]=TrimStr("PersonEmail"),["mailingStreet"]=mailingStreet,["mailingPostalCode"]=mailingPostalCode,["mailingCity"]=mailingCity,["mailingCountry"]=mailingCountry,["accountStatus"]=TrimStr("Account_Status__c"),["accountSource"]=accountSource,["hotlisted"]=hotlisted};JsonLog(context,"END - Request processing completed",new{payload=result,details=basicDetails},correlationId,"END");return new APIGatewayProxyResponse{StatusCode=200,Body=JsonSerializer.Serialize(result,new JsonSerializerOptions{DefaultIgnoreCondition=JsonIgnoreCondition.WhenWritingNull}),Headers=new Dictionary<string,string>{{"Content-Type","application/json"},{"X_CORRELATION_ID",correlationId}}};}catch(Exception ex){return await HandleUnhandledErrorAsync(context,basicDetails,correlationId,request,ex);} }private static string? GetHeader(APIGatewayProxyRequest r,string key){if(r.Headers!=null){foreach(var kv in r.Headers){ if(string.Equals(kv.Key,key,StringComparison.OrdinalIgnoreCase)) return kv.Value;}}return null;}private static void JsonLog(ILambdaContext ctx,string message,object content,string correlationId,string? tracePoint=null,string priority="INFO"){var logObj=new Dictionary<string,object?>{{"message",message},{"tracePoint",tracePoint},{"priority",priority},{"correlationId",correlationId},{"content",content}};ctx.Logger.Log(JsonSerializer.Serialize(logObj)+"\n");}private static async Task<(string instanceUrl,string sessionId)> SalesforceLoginAsync(IConfiguration cfg,ILambdaContext context){string username=cfg["salesforce.username"]??string.Empty;string password=cfg["salesforce.password"]??string.Empty;string token=cfg["salesforce.token"]??string.Empty;string baseUrl=cfg["salesforce.url"]??"https://login.salesforce.com";string apiVersion=cfg["salesforce.api.version"]??"57.0";string loginUrl=baseUrl.Contains("/services/Soap/")?baseUrl.TrimEnd('/'):baseUrl.TrimEnd('/')+"/services/Soap/u/"+apiVersion;string soap=$"<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\"><env:Body><n1:login xmlns:n1=\"urn:partner.soap.sforce.com\"><n1:username>{System.Security.SecurityElement.Escape(username)}</n1:username><n1:password>{System.Security.SecurityElement.Escape(password+token)}</n1:password></n1:login></env:Body></env:Envelope>";var req=new HttpRequestMessage(HttpMethod.Post,loginUrl);req.Content=new StringContent(soap,Encoding.UTF8,"text/xml");req.Headers.Add("SOAPAction","login");var resp=await httpClient.SendAsync(req);var respXml=await resp.Content.ReadAsStringAsync();if(!resp.IsSuccessStatusCode){throw new Exception($"Salesforce login failed: {(int)resp.StatusCode} {resp.ReasonPhrase} {respXml}");}var xmldoc=new XmlDocument();xmldoc.LoadXml(respXml);var mgr=new XmlNamespaceManager(xmldoc.NameTable);mgr.AddNamespace("soapenv","http://schemas.xmlsoap.org/soap/envelope/");mgr.AddNamespace("sf","urn:partner.soap.sforce.com");var sidNode=xmldoc.SelectSingleNode("//sf:sessionId",mgr);var surlNode=xmldoc.SelectSingleNode("//sf:serverUrl",mgr);if(sidNode==null||surlNode==null) throw new Exception("Salesforce login response missing sessionId/serverUrl");string sessionId=sidNode.InnerText;var serverUrl=new Uri(surlNode.InnerText);string instanceUrl=$"{serverUrl.Scheme}://{serverUrl.Host}";return(instanceUrl,sessionId);}private async Task<APIGatewayProxyResponse> HandleSalesforceHttpErrorAsync(ILambdaContext context,Dictionary<string,object?> basicDetails,string correlationId,APIGatewayProxyRequest request,System.Net.HttpStatusCode status,string body){int httpStatus=(int)status;string errorMessage=$"SALESFORCE CONNECTIVITY ERROR";string description=body;var errorObj=new{error=new{errorCode=httpStatus,errorDateTime=DateTime.UtcNow,errorMessage=errorMessage,errorDescription=description}};await EmitErrorSideEffectsAsync(context,basicDetails,request,httpStatus,errorMessage,description);JsonLog(context,"Error",new{payload=errorObj,details=basicDetails},correlationId,"EXCEPTION","ERROR");return new APIGatewayProxyResponse{StatusCode=httpStatus,Body=JsonSerializer.Serialize(errorObj),Headers=new Dictionary<string,string>{{"Content-Type","application/json"},{"X_CORRELATION_ID",correlationId}}};}private async Task<APIGatewayProxyResponse> ErrorBadRequestAsync(ILambdaContext context,Dictionary<string,object?> basicDetails,string correlationId,APIGatewayProxyRequest request,string description){int httpStatus=400;var errorObj=new{error=new{errorCode=httpStatus,errorDateTime=DateTime.UtcNow,errorMessage="BAD REQUEST",errorDescription=description}};await EmitErrorSideEffectsAsync(context,basicDetails,request,httpStatus,"BAD REQUEST",description);JsonLog(context,"Error",new{payload=errorObj,details=basicDetails},correlationId,"EXCEPTION","ERROR");return new APIGatewayProxyResponse{StatusCode=httpStatus,Body=JsonSerializer.Serialize(errorObj),Headers=new Dictionary<string,string>{{"Content-Type","application/json"},{"X_CORRELATION_ID",correlationId}}};}private async Task<APIGatewayProxyResponse> HandleUnhandledErrorAsync(ILambdaContext context,Dictionary<string,object?> basicDetails,string correlationId,APIGatewayProxyRequest request,Exception ex){int httpStatus=500;string msg=$"{ex.GetType().Name} ERROR";string description=ex.Message;var errorObj=new{error=new{errorCode=httpStatus,errorDateTime=DateTime.UtcNow,errorMessage=msg,errorDescription=description}};await EmitErrorSideEffectsAsync(context,basicDetails,request,httpStatus,msg,description);JsonLog(context,"Error",new{payload=errorObj,details=basicDetails},correlationId,"EXCEPTION","ERROR");return new APIGatewayProxyResponse{StatusCode=httpStatus,Body=JsonSerializer.Serialize(errorObj),Headers=new Dictionary<string,string>{{"Content-Type","application/json"},{"X_CORRELATION_ID",correlationId}}};}private async Task EmitErrorSideEffectsAsync(ILambdaContext context,Dictionary<string,object?> basicDetails,APIGatewayProxyRequest request,int httpStatus,string errorMessage,string errorDescription){try{string regionName=_config["amazon.s3.region"]??RegionEndpoint.USEast1.SystemName;var region=RegionEndpoint.GetBySystemName(regionName);var s3=new AmazonS3Client(_config["amazon.s3.accessKey"],_config["amazon.s3.secretKey"],region);var cw=new AmazonCloudWatchClient(_config["amazon.s3.accessKey"],_config["amazon.s3.secretKey"],region);string appName=_config["json.logger.application.name"]??"app";var s3payload=new Dictionary<string,object?>{["errorCode"]=httpStatus,["httpMethod"]=request.HttpMethod,["httpErrorCode"]=httpStatus,["errorMessage"]=errorMessage,["errorDescription"]=Truncate(errorDescription,256),["timestamp"]=DateTime.UtcNow,["apiName"]=appName,["endpoint"]=request.Path};string bucket=_config["amazon.s3.bucket"]??string.Empty;string key=$"{appName}-{DateTime.UtcNow:yyyyMMddTHHmmssfffZ}";var put=new PutObjectRequest{BucketName=bucket,Key=key,ContentBody=JsonSerializer.Serialize(s3payload),ContentType="application/json"};await s3.PutObjectAsync(put);var datum=new MetricDatum{MetricName="GBR_EXCEPTIONS",Timestamp=DateTime.UtcNow,Unit=StandardUnit.Count,Value=1,Dimensions=new List<Dimension>{new Dimension{Name="HTTP_METHOD",Value=request.HttpMethod??""},new Dimension{Name="GBR_EXCEPTION",Value=(errorMessage??"ERROR").Replace(" ","_")}}};await cw.PutMetricDataAsync(new PutMetricDataRequest{Namespace="Custom/GBR",MetricData=new List<MetricDatum>{datum}});}catch(Exception e){context.Logger.Log($"SideEffects error: {e.Message}\n");}}private static string Truncate(string? s,int len){if(string.IsNullOrEmpty(s)) return s??string.Empty;return s.Length<=len?s:s.Substring(0,len);} }}