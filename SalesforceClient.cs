using System;using System.Collections.Generic;using System.Net.Http;using System.Text;using System.Text.Json;using System.Text.RegularExpressions;using System.Threading.Tasks;namespace GetAccountByIdLambda{public class SalesforceClient{private readonly Config _cfg;private readonly Logger _log;private readonly string _corrId;private readonly HttpClient _http=new HttpClient();private string _sessionId;private string _instanceUrl;private string _apiVersion;public SalesforceClient(Config cfg, Logger log,string corrId){_cfg=cfg;_log=log;_corrId=corrId;_apiVersion=ExtractApiVersion(_cfg.SalesforceUrl);}public async Task EnsureLoginAsync(){if(!string.IsNullOrEmpty(_sessionId) && !string.IsNullOrEmpty(_instanceUrl)) return; string urn = _cfg.SalesforceUrl.Contains("/Soap/u/")?"urn:enterprise.soap.sforce.com":"urn:partner.soap.sforce.com"; string body=$"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\"><env:Body><n1:login xmlns:n1=\"{urn}\"><n1:username>{System.Security.SecurityElement.Escape(_cfg.SalesforceUsername)}</n1:username><n1:password>{System.Security.SecurityElement.Escape(_cfg.SalesforcePassword+_cfg.SalesforceToken)}</n1:password></n1:login></env:Body></env:Envelope>"; var req=new HttpRequestMessage(HttpMethod.Post,_cfg.SalesforceUrl); req.Content=new StringContent(body,Encoding.UTF8,"text/xml"); req.Headers.TryAddWithoutValidation("SOAPAction","login"); var res=await _http.SendAsync(req); string xml=await res.Content.ReadAsStringAsync(); if(!res.IsSuccessStatusCode){throw new Exception($"SALESFORCE CONNECTIVITY ERROR: {res.StatusCode} - {xml}");} _sessionId=ExtractXml(xml, "sessionId"); string serverUrl=ExtractXml(xml, "serverUrl"); if(string.IsNullOrEmpty(_sessionId) || string.IsNullOrEmpty(serverUrl)) throw new Exception("SALESFORCE CONNECTIVITY ERROR: Invalid login response"); var u=new Uri(serverUrl); _instanceUrl=$"{u.Scheme}://{u.Host}"; }
public async Task<List<JsonObjectAccessor>> QueryAsync(string soql){if(string.IsNullOrWhiteSpace(soql)) throw new ArgumentException("SOQL required"); await EnsureLoginAsync(); string q=Uri.EscapeDataString(soql); string url=$"{_instanceUrl}/services/data/v{_apiVersion}/query?q={q}"; var req=new HttpRequestMessage(HttpMethod.Get,url); req.Headers.Authorization=new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",_sessionId); var res=await _http.SendAsync(req); string json=await res.Content.ReadAsStringAsync(); if(!res.IsSuccessStatusCode){throw new Exception($"SALESFORCE CONNECTIVITY ERROR: {res.StatusCode} - {json}");} using var doc=JsonDocument.Parse(json); var list=new List<JsonObjectAccessor>(); if(doc.RootElement.TryGetProperty("records", out var recs)) { foreach(var r in recs.EnumerateArray()){ list.Add(new JsonObjectAccessor(r)); } } return list; }
private static string ExtractXml(string xml,string tag){var m=Regex.Match(xml,$"<{tag}>(.*?)</{tag}>"); return m.Success?System.Net.WebUtility.HtmlDecode(m.Groups[1].Value):null;}
private static string ExtractApiVersion(string url){var m=Regex.Match(url,@"/Soap/[up]/(?<v>[0-9]+\.[0-9]+)"); return m.Success?m.Groups["v"].Value:"57.0";} }
public readonly struct JsonObjectAccessor{private readonly JsonElement _e; public JsonObjectAccessor(JsonElement e){_e=e;} public string GetString(string name){return _e.TryGetProperty(name,out var v) && v.ValueKind!=JsonValueKind.Null? v.ToString():null;} public bool? GetBool(string name){return _e.TryGetProperty(name,out var v) && v.ValueKind==JsonValueKind.True? true: (_e.TryGetProperty(name,out v) && v.ValueKind==JsonValueKind.False? (bool?)false:null);} public DateTimeOffset? GetNullableDate(string name){ if(_e.TryGetProperty(name,out var v) && v.ValueKind!=JsonValueKind.Null){ if(DateTimeOffset.TryParse(v.ToString(), out var dt)) return dt; } return null;} public string GetNestedString(string parent,string child){ if(_e.TryGetProperty(parent,out var p) && p.ValueKind==JsonValueKind.Object){ if(p.TryGetProperty(child,out var c) && c.ValueKind!=JsonValueKind.Null) return c.ToString(); } return null;} } public class Config{private readonly Microsoft.Extensions.Configuration.IConfigurationRoot _cfg;public Config(){var b=new Microsoft.Extensions.Configuration.ConfigurationBuilder().SetBasePath(System.IO.Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json", optional:true).AddEnvironmentVariables();_cfg=b.Build();}public string MuleEnv=>_cfg["mule.env"];public string SalesforceUsername=>_cfg["salesforce.username"];public string SalesforcePassword=>_cfg["salesforce.password"];public string SalesforceToken=>_cfg["salesforce.token"];public string SalesforceUrl=>_cfg["salesforce.url"];public string S3AccessKey=>_cfg["amazon.s3.accessKey"];public string S3SecretKey=>_cfg["amazon.s3.secretKey"];public string S3Region=>_cfg["amazon.s3.region"];public string S3Bucket=>_cfg["amazon.s3.bucket"];public string JsonLoggerMaskedFields=>_cfg["json.logger.masked.fields"];public string AppName=>_cfg["json.logger.application.name"];public string AppVersion=>_cfg["json.logger.application.version"];}
public class Logger{private readonly Config _cfg;private readonly System.Collections.Generic.HashSet<string> _masked;public Logger(Config cfg){_cfg=cfg;_masked=new System.Collections.Generic.HashSet<string>((_cfg.JsonLoggerMaskedFields??string.Empty).Split(',',';'),StringComparer.OrdinalIgnoreCase);}public void Info(string c,string m,object o){Log("INFO",c,m,o);}public void Debug(string c,string m,object o){Log("DEBUG",c,m,o);}public void Error(string c,string m,object o){Log("ERROR",c,m,o);}private void Log(string lvl,string c,string m,object o){try{string j=o==null?null:System.Text.Json.JsonSerializer.Serialize(o); Console.WriteLine($"{lvl} [{c}] {_cfg.AppName}: {m} | {j}");}catch{}}}
public class S3ErrorPublisher{private readonly Config _cfg;public S3ErrorPublisher(Config c){_cfg=c;}public async Task PutAsync(ErrorS3Record rec){try{var region=Amazon.RegionEndpoint.GetBySystemName(_cfg.S3Region??"eu-west-2"); Amazon.S3.IAmazonS3 s3; if(!string.IsNullOrWhiteSpace(_cfg.S3AccessKey) && !string.IsNullOrWhiteSpace(_cfg.S3SecretKey)) s3=new Amazon.S3.AmazonS3Client(new Amazon.Runtime.BasicAWSCredentials(_cfg.S3AccessKey,_cfg.S3SecretKey),region); else s3=new Amazon.S3.AmazonS3Client(region); var key=$"{_cfg.AppName}-{DateTimeOffset.UtcNow:yyyyMMddTHHmmssfffZ}.json"; var put=new Amazon.S3.Model.PutObjectRequest{BucketName=_cfg.S3Bucket, Key=key, ContentType="application/json", ContentBody=System.Text.Json.JsonSerializer.Serialize(rec)}; await s3.PutObjectAsync(put);}catch{}}}
public class CloudWatchMetrics{private readonly Config _cfg;public CloudWatchMetrics(Config c){_cfg=c;}public async Task SendExceptionAsync(string metric,string method,string exKey){try{var region=Amazon.RegionEndpoint.GetBySystemName(_cfg.S3Region??"eu-west-2"); Amazon.CloudWatch.IAmazonCloudWatch cw; if(!string.IsNullOrWhiteSpace(_cfg.S3AccessKey) && !string.IsNullOrWhiteSpace(_cfg.S3SecretKey)) cw=new Amazon.CloudWatch.AmazonCloudWatchClient(new Amazon.Runtime.BasicAWSCredentials(_cfg.S3AccessKey,_cfg.S3SecretKey),region); else cw=new Amazon.CloudWatch.AmazonCloudWatchClient(region); var req=new Amazon.CloudWatch.Model.PutMetricDataRequest{Namespace=_cfg.AppName??"Custom"}; req.MetricData.Add(new Amazon.CloudWatch.Model.MetricDatum{MetricName=metric, Unit=Amazon.CloudWatch.StandardUnit.Count, Value=1, Dimensions={ new Amazon.CloudWatch.Model.Dimension{Name="HTTP_METHOD",Value=method??""}, new Amazon.CloudWatch.Model.Dimension{Name="GBR_EXCEPTION",Value=exKey??""}}}); await cw.PutMetricDataAsync(req);}catch{}}}
public static class ErrorMapper{public static (int HttpStatus,string ErrorMessage,string Description) Map(Exception ex){var msg=ex.Message??""; if(msg.Contains("Invalid", StringComparison.OrdinalIgnoreCase)) return (401, "SALESFORCE CONNECTIVITY ERROR", msg); if(msg.Contains("Failed to send request", StringComparison.OrdinalIgnoreCase)) return (404, "SALESFORCE CONNECTIVITY ERROR", msg); return (500, "INTERNAL ERROR", msg);} }
public class ErrorS3Record{public int errorCode{get;set;}public string httpMethod{get;set;}public int httpErrorCode{get;set;}public string errorMessage{get;set;}public string errorDescription{get;set;}public DateTimeOffset timestamp{get;set;}public string apiName{get;set;}public string endpoint{get;set;}} }